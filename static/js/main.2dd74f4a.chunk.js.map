{"version":3,"sources":["components/Input.jsx","components/Grid.jsx","components/Container.jsx","components/IVChecker/IVChecker.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Input","props","state","this","listID","datalistComponent","inputPrpos","input","createElement","list","Component","NumberInput","type","ListInput","Math","random","listItems","map","value","key","id","createGridStyle","column","row","split","ratio","isNaN","join","gridTemplateColumns","gridTemplateRows","Grid","children","className","style","Container","findByName","array","name","find","object","DynamaxButton","dynamax","onChange","onClick","StatInput","stat","statKey","useState","realState","ev","pokemonStat","setPokemonStat","eventHandler","event","newState","target","prevState","placeholder","min","max","defaultValue","calcIV","pokemon","nature","level","range","Array","fill","e","i","baseStatKey","from","indexOf","baseStat","validIVs","filter","iv","floor","up","down","TypeError","length","minIV","maxIV","IVResult","pokedex","pokemonNatures","IVChecker","setDynamax","setLevel","setPokemon","setNature","getInputValue","pkm","set","H","A","B","C","D","S","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2dd74f4a.chunk.js","sourcesContent":["import React, { Component, createElement } from 'react';\nimport '../css/Input.css';\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n    this.state = props;\n  }\n\n  render() {\n    const {\n      listID,\n      datalistComponent,\n    } = this.state;\n    const inputPrpos = { ...this.state };\n    delete inputPrpos.listID;\n    delete inputPrpos.datalistComponent;\n    const input = createElement('input', {\n      ...inputPrpos,\n      list: listID,\n    });\n    return (\n      <div>\n        {input}\n        {datalistComponent}\n      </div>\n    );\n  }\n}\n\nclass TextInput extends Input {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.state,\n      type: 'text',\n    };\n  }\n}\n\nclass NumberInput extends Input {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.state,\n      type: 'number',\n    };\n  }\n}\n\nclass ListInput extends Input {\n  constructor(props) {\n    super(props);\n    const listID = 'ListInputID' + Math.random();\n    const listItems = props.list.map(\n      value => <option value={value} key={'ListInputItem' + Math.random()} />\n    );\n    const datalistComponent = (\n      <datalist id={listID}>\n        {listItems}\n      </datalist>\n    );\n    this.state = {\n      ...this.state,\n      listID,\n      datalistComponent,\n    };\n  }\n}\n\nexport default Input;\nexport {\n  TextInput,\n  NumberInput,\n  ListInput,\n};\n","import React from 'react';\nimport '../css/Grid.css';\n\nfunction createGridStyle({column, row}) {\n  [\n    column,\n    row,\n  ] = [\n    column,\n    row,\n  ].map(\n    value => (value || '').split(':').map(\n      ratio => isNaN(ratio)? ratio : `${ratio}fr`\n    ).join(' ')\n  );\n\n  return {\n    gridTemplateColumns: column,\n    gridTemplateRows: row,\n  };\n}\n\nconst Grid = ({\n  children,\n  column,\n  row,\n}) => (\n  <div\n    className=\"grid\"\n    style={createGridStyle({column, row})}\n  >\n    {children}\n  </div>\n);\n\nexport default Grid;\n","import { createElement } from 'react';\nimport '../css/Container.css';\n\nconst Container = (props) => {\n  let { className } = props;\n  className = (className || '') + ' container';\n  return createElement('div', {\n    ...props,\n    className,\n  });\n}\n\nexport default Container;\n","import React, { useState } from 'react';\nimport { NumberInput, ListInput } from '../Input';\nimport Grid from '../Grid';\nimport Container from '../Container';\n\nimport pokedex from '../../pokemon/pokedex.json';\nimport pokemonNatures from '../../pokemon/nature.json';\n\nimport '../../css/IVChecker/IVChecker.css';\n\nfunction findByName(array, name) {\n  return array.find(object => object.name === name);\n}\n\nconst DynamaxButton = ({\n  dynamax,\n  onChange,\n}) => {\n  function clickEvent() {\n    dynamax = !dynamax;\n    onChange(dynamax);\n  }\n  return (\n    <div\n      id=\"dynamax-button\"\n      className={dynamax? \"dynamax\" : \"\"}\n      onClick={clickEvent}\n    >\n      다이맥스 : {dynamax? \"\" : \"비\"}활성화\n    </div>\n  );\n};\n\nconst StatInput = ({\n  stat,\n  statKey,\n  onChange,\n}) => {\n  const [ pokemonStat, setPokemonStat ] = useState({\n    realState: 0,\n    ev: 0,\n  });\n\n  const eventHandler = (key) => (event) => {\n    const value = +event.target.value;\n    let newState;\n    setPokemonStat(prevState => {\n      newState = { ...prevState };\n      newState[key] = value;\n      onChange(newState);\n      return newState;\n    });\n  };\n\n  return (\n    <Grid column=\"1:2:2\">\n      <div>{stat}</div>\n      <NumberInput\n        placeholder={stat + \" 실수치\"}\n        min={1}\n        onChange={eventHandler('realState')}\n      />\n      <NumberInput\n        placeholder={stat + \" 노력치\"}\n        min={0}\n        max={252}\n        defaultValue={pokemonStat.ev}\n        onChange={eventHandler('ev')}\n      />\n    </Grid>\n  );\n}\n\nfunction calcIV(type, pokemon, dynamax, stat, nature, level) {\n  const defaultMessage = \"???\";\n  if (!pokemon || !nature) return defaultMessage;\n  const range = Array(32).fill().map((e, i) => i);\n  const baseStatKey = Array.from('HABCDS').indexOf(type);\n  const baseStat = pokemon.state[baseStatKey];\n  stat = (stat || {})[type] || {};\n  let validIVs = [];\n  switch (type) {\n    case 'H':\n      validIVs = range.filter(iv => {\n        return stat.realState === (dynamax? 2 : 1) * (\n            Math.floor(\n            (level / 100) * (\n              baseStat * 2\n              + iv\n              + Math.floor(stat.ev / 4)\n            )\n          ) + level + 10\n        );\n      });\n      break;\n\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'S':\n      validIVs = range.filter(iv => {\n        return stat.realState === Math.floor(\n          Math.floor(\n            (level / 100) * (\n              baseStat * 2\n              + iv\n              + Math.floor(stat.ev / 4)\n            )\n            + 5\n          ) * (\n            nature.up === type\n              ? 1.1\n              : 1\n          ) * (\n            nature.down === type\n              ? 0.9\n              : 1\n          )\n        );\n      });\n      break;\n\n    default:\n      throw TypeError(\"Invalid type\");\n  }\n\n  if (!validIVs.length) return defaultMessage;\n  const minIV = Math.min(...validIVs);\n  const maxIV = Math.max(...validIVs);\n  return (minIV === maxIV)? maxIV : `${minIV}~${maxIV}`;\n}\n\nconst IVResult = ({\n  pokemon,\n  dynamax,\n  stat,\n  nature,\n  level,\n}) => {\n  pokemon = findByName(pokedex, pokemon);\n  nature = findByName(pokemonNatures, nature);\n  return (\n    <Container>\n      <Grid column=\"1:3\">\n        <div>HP</div>\n        <div>{calcIV('H', pokemon, dynamax, stat, nature, level)}</div>\n      </Grid>\n      <Grid column=\"1:3\">\n        <div>공격</div>\n        <div>{calcIV('A', pokemon, dynamax, stat, nature, level)}</div>\n      </Grid>\n      <Grid column=\"1:3\">\n        <div>방어</div>\n        <div>{calcIV('B', pokemon, dynamax, stat, nature, level)}</div>\n      </Grid>\n      <Grid column=\"1:3\">\n        <div>특공</div>\n        <div>{calcIV('C', pokemon, dynamax, stat, nature, level)}</div>\n      </Grid>\n      <Grid column=\"1:3\">\n        <div>특방</div>\n        <div>{calcIV('D', pokemon, dynamax, stat, nature, level)}</div>\n      </Grid>\n      <Grid column=\"1:3\">\n        <div>스피드</div>\n        <div>{calcIV('S', pokemon, dynamax, stat, nature, level)}</div>\n      </Grid>\n    </Container>\n  );\n};\n\nconst IVChecker = () => {\n  const [ dynamax, setDynamax ] = useState(false);\n  const [ level, setLevel ] = useState();\n  const [ pokemon, setPokemon ] = useState();\n  const [ nature, setNature ] = useState();\n  const [ pokemonStat, setPokemonStat ] = useState({});\n\n  function getInputValue(event) {\n    return event.target.value;\n  }\n\n  return (\n    <Container id=\"iv-checker\">\n      <h2>개체값 계산기</h2>\n      <div>\n        <ListInput\n          placeholder=\"포켓몬 이름\"\n          list={pokedex.map(pkm => pkm.name)}\n          onChange={event => setPokemon(getInputValue(event))}\n        />\n        <Grid column=\"3:2\">\n          <ListInput\n            placeholder=\"성격\"\n            list={pokemonNatures.map(nature => nature.name)}\n            onChange={event => setNature(getInputValue(event))}\n          />\n          <NumberInput\n            placeholder=\"레벨\"\n            min={1}\n            max={100}\n            onChange={event => setLevel(+getInputValue(event))}\n          />\n        </Grid>\n        <DynamaxButton\n          dynamax={dynamax}\n          onChange={dynamax => setDynamax(dynamax)}\n        />\n        <Container>\n          <Grid column=\"1:2:2\">\n            <div />\n            <div>실수치</div>\n            <div>노력치</div>\n          </Grid>\n          <StatInput\n            stat=\"HP\"\n            onChange={set => setPokemonStat(pokemonStat => ({\n              ...pokemonStat,\n              H: set,\n            }))}\n          />\n          <StatInput\n            stat=\"공격\"\n            onChange={set => setPokemonStat(pokemonStat => ({\n              ...pokemonStat,\n              A: set,\n            }))}\n          />\n          <StatInput\n            stat=\"방어\"\n            onChange={set => setPokemonStat(pokemonStat => ({\n              ...pokemonStat,\n              B: set,\n            }))}\n          />\n          <StatInput\n            stat=\"특공\"\n            onChange={set => setPokemonStat(pokemonStat => ({\n              ...pokemonStat,\n              C: set,\n            }))}\n          />\n          <StatInput\n            stat=\"특방\"\n            onChange={set => setPokemonStat(pokemonStat => ({\n              ...pokemonStat,\n              D: set,\n            }))}\n          />\n          <StatInput\n            stat=\"스피드\"\n            onChange={set => setPokemonStat(pokemonStat => ({\n              ...pokemonStat,\n              S: set,\n            }))}\n          />\n        </Container>\n      </div>\n      <IVResult\n        pokemon={pokemon}\n        nature={nature}\n        stat={pokemonStat}\n        dynamax={dynamax}\n        level={level}\n      />\n    </Container>\n  );\n};\n\nexport default IVChecker;\n","import React, { Component } from 'react';\nimport IVChecker from './components/IVChecker/IVChecker';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pokè Info</h1>\n        <IVChecker />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}